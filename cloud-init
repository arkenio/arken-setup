#cloud-config

# IO scripts that pulls other scripts from Github
write_files:
  - path: /var/lib/io/updateScripts
    permissions: 0755
    owner: core:core
    content: |
      #!/usr/bin/sh -
      mkdir -p /opt/data
      if [ ! -d /opt/data/.git ]; then
        git clone https://github.com/nuxeo/nuxeo.io.git /opt/data
      else
        cd /opt/data && git pull --all
      fi
      cd /opt/data
      git checkout master
  - path: /etc/systemd/system/docker.service.d/increase-ulimit.conf
    owner: core:core
    permissions: 0644
    content: |
      [Service]
      LimitMEMLOCK=infinity
  - path: /etc/systemd/system/etcd.service.d/90-manual.conf
    owner: core:core
    permissions: 0644
    content: |
      [Service]
      LimitMEMLOCK=infinity
      LimitCORE=infinity

users:
  - name: dmetzler
    coreos-ssh-import-github: dmetzler
    groups:
      - sudo
      - docker
  - name: troger
    coreos-ssh-import-github: troger
    groups:
      - sudo
      - docker
  - name: vpasquier
    coreos-ssh-import-github: vpasquier
    groups:
      - sudo
      - docker
  - name: akervern
    coreos-ssh-import-github: akervern
    groups:
      - sudo
      - docker

coreos:
  update:
      reboot-strategy: off
  etcd:
      discovery: ##ETCD_TOKEN##
      addr: $private_ipv4:4001
      peer-addr: $private_ipv4:7001
  units:

    - name: format-xvdb.service
      command: start
      content: |
        [Unit]
        Description=Formats xvdb
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/sbin/wipefs -f /dev/xvdb
        ExecStart=/usr/sbin/mkfs.btrfs -f /dev/xvdb

    - name: format-xvdc.service
      command: start
      content: |
        [Unit]
        Description=Formats xvdc
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/sbin/wipefs -f /dev/xvdc
        ExecStart=/usr/sbin/mkfs.btrfs -f /dev/xvdc

    - name: var-lib-docker.mount
      command: start
      content: |
        [Unit]
        Description=Mount ephemeral to /var/lib/docker
        Requires=format-xvdb.service
        After=format-xvdb.service
        Before=docker.service
        [Mount]
        What=/dev/xvdb
        Where=/var/lib/docker
        Type=btrfs

    - name: data.mount
      command: start
      content: |
        [Unit]
        Description=Mount ephemeral to /data
        Requires=format-xvdc.service
        After=format-xvdc.service
        Before=docker.service
        [Mount]
        What=/dev/xvdc
        Where=/data
        Type=btrfs


    - name: etcd.service
      command: start
    - name: fleet.service
      command: start
      runtime: no
      content: |
        [Unit]
        Description=fleet
        Requires=etcd.service
        After=etcd.service

        [Service]
        Environment=FLEET_PUBLIC_IP=$private_ipv4
        ExecStart=/usr/bin/fleet
        Restart=always
        RestartSec=5s

# Execution of the Github pull script (only run once)
    - name: github-script.service
      command: start
      content: |
        [Unit]
        Description=Get Nuxeo.io runtime scripts

        [Service]
        Type=oneshot
        ExecStart=/var/lib/io/updateScripts
        RemainAfterExit=yes

# init-cluster
    - name: cluster-init.service
      command: stop
      content: |
        [Unit]
        Description=Init Arken.io cluster
        ConditionFileNotEmpty=/opt/data/systemd/cluster-init/start.sh

        [Service]
        Type=oneshot
        ExecStart=/opt/data/systemd/cluster-init/start.sh

# Dynamic reverse proxy
    - name: gogeta.service
      command: stop
      content: |
        [Unit]
        Description=Gogeta Core service
        ConditionFileNotEmpty=/opt/data/systemd/gogeta/start.sh

        [Service]
        Environment='GOGETA_NAME=gogeta'
        ExecStart=/opt/data/systemd/gogeta/start.sh
        ExecStop=/opt/data/systemd/gogeta/stop.sh

        Restart=always
        RestartSec=10s


# init-node
    - name: node-init.service
      command: start
      content: |
        [Unit]
        Description=Init Arken.io node
        After=github-script.service fleet.service etcd.service docker.service

        [Service]
        Type=oneshot
        ExecStart=/opt/data/systemd/node-init/start.sh
